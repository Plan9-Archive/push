	DATA	argv0+0(SB)/4,$.string<>+0(SB)
	TEXT	start+0(SB),0,$16
	MOVL	$188,CX
	MOVL	CX,(SP)
	CALL	,emalloc+0(SB)
	MOVL	AX,p+-4(SP)
	MOVL	c+0(FP),CX
	MOVL	CX,(SP)
	CALL	,codecopy+0(SB)
	MOVL	runq+0(SB),BX
	MOVL	p+-4(SP),DX
	MOVL	AX,(DX)
	MOVL	pc+4(FP),CX
	MOVL	CX,4(DX)
	MOVL	$0,8(DX)
	MOVL	DX,CX
	CMPL	BX,$0
	JEQ	,3(PC)
	MOVL	12(BX),AX
	JMP	,2(PC)
	MOVL	$0,AX
	MOVL	AX,16(CX)
	MOVL	AX,12(DX)
	MOVL	local+8(FP),CX
	MOVL	CX,20(DX)
	MOVL	$0,24(DX)
	MOVL	$0,28(DX)
	MOVL	$0,36(DX)
	MOVL	$0,40(DX)
	MOVL	$1,44(DX)
	MOVL	BX,184(DX)
	MOVL	DX,runq+0(SB)
	RET	,
	TEXT	newword+0(SB),0,$16
	MOVL	$8,CX
	MOVL	CX,(SP)
	CALL	,emalloc+0(SB)
	MOVL	AX,p+-4(SP)
	MOVL	wd+0(FP),CX
	MOVL	CX,(SP)
	CALL	,strdup+0(SB)
	MOVL	p+-4(SP),DX
	MOVL	AX,(DX)
	MOVL	next+4(FP),CX
	MOVL	CX,4(DX)
	MOVL	DX,AX
	RET	,
	RET	,
	TEXT	pushword+0(SB),0,$12
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	CMPL	AX,$0
	JNE	,5(PC)
	DATA	.string<>+0(SB)/8,$"rc\zpushw"
	DATA	.string<>+8(SB)/8,$"ord but "
	DATA	.string<>+16(SB)/8,$"no argv!"
	MOVL	$.string<>+3(SB),AX
	MOVL	AX,(SP)
	MOVL	$0,4(SP)
	CALL	,panic+0(SB)
	MOVL	wd+0(FP),CX
	MOVL	CX,(SP)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,4(SP)
	CALL	,newword+0(SB)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	AX,(CX)
	RET	,
	TEXT	popword+0(SB),0,$20
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	CMPL	AX,$0
	JNE	,5(PC)
	DATA	.string<>+24(SB)/8,$"\zpopword"
	DATA	.string<>+32(SB)/8,$" but no "
	MOVL	$.string<>+25(SB),AX
	MOVL	AX,(SP)
	MOVL	$0,4(SP)
	CALL	,panic+0(SB)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),DX
	CMPL	DX,$0
	MOVL	DX,p+-4(SP)
	JNE	,6(PC)
	DATA	.string<>+40(SB)/8,$"argv!\zpo"
	DATA	.string<>+48(SB)/8,$"pword bu"
	DATA	.string<>+56(SB)/8,$"t no wor"
	MOVL	$.string<>+46(SB),AX
	MOVL	AX,(SP)
	MOVL	$0,4(SP)
	CALL	,panic+0(SB)
	MOVL	p+-4(SP),DX
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	4(DX),CX
	MOVL	CX,(AX)
	MOVL	(DX),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	MOVL	p+-4(SP),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	RET	,
	TEXT	freelist+0(SB),0,$16
	MOVL	w+0(FP),CX
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,14(PC)
	CMPL	CX,$0
	JEQ	,-2(PC)
	MOVL	4(CX),AX
	MOVL	AX,nw+-4(SP)
	MOVL	CX,w+0(FP)
	MOVL	(CX),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	MOVL	w+0(FP),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	MOVL	nw+-4(SP),CX
	JMP	,-14(PC)
	RET	,
	TEXT	pushlist+0(SB),0,$16
	MOVL	$8,CX
	MOVL	CX,(SP)
	CALL	,emalloc+0(SB)
	MOVL	runq+0(SB),BX
	MOVL	8(BX),CX
	MOVL	CX,4(AX)
	MOVL	$0,(AX)
	MOVL	AX,8(BX)
	RET	,
	TEXT	poplist+0(SB),0,$20
	MOVL	runq+0(SB),AX
	MOVL	8(AX),CX
	CMPL	CX,$0
	MOVL	CX,p+-4(SP)
	JNE	,6(PC)
	DATA	.string<>+64(SB)/8,$"d!\zpopli"
	DATA	.string<>+72(SB)/8,$"st but n"
	MOVL	$.string<>+67(SB),AX
	MOVL	AX,(SP)
	MOVL	$0,4(SP)
	CALL	,panic+0(SB)
	MOVL	p+-4(SP),CX
	MOVL	(CX),AX
	MOVL	AX,(SP)
	CALL	,freelist+0(SB)
	MOVL	p+-4(SP),DX
	MOVL	runq+0(SB),AX
	MOVL	4(DX),CX
	MOVL	CX,8(AX)
	MOVL	DX,(SP)
	CALL	,efree+0(SB)
	RET	,
	TEXT	count+0(SB),0,$8
	MOVL	w+0(FP),CX
	MOVL	$0,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,6(PC)
	INCL	,DX
	CMPL	CX,$0
	JEQ	,-3(PC)
	MOVL	4(CX),CX
	JMP	,-6(PC)
	MOVL	DX,AX
	RET	,
	RET	,
	TEXT	pushredir+0(SB),0,$16
	MOVL	$12,CX
	MOVL	CX,(SP)
	CALL	,emalloc+0(SB)
	MOVL	runq+0(SB),BX
	MOVL	type+0(FP),CX
	MOVB	CX,(AX)
	MOVL	from+4(FP),CX
	MOVW	CX,2(AX)
	MOVL	to+8(FP),CX
	MOVW	CX,4(AX)
	MOVL	12(BX),CX
	MOVL	CX,8(AX)
	MOVL	AX,12(BX)
	RET	,
	TEXT	newvar+0(SB),0,$16
	MOVL	$28,CX
	MOVL	CX,(SP)
	CALL	,emalloc+0(SB)
	MOVL	name+0(FP),CX
	MOVL	CX,(AX)
	MOVL	$0,4(AX)
	MOVL	$0,12(AX)
	MOVL	$0,8(AX)
	MOVL	$0,16(AX)
	MOVL	next+4(FP),CX
	MOVL	CX,24(AX)
	RET	,
	RET	,
	TEXT	main+0(SB),0,$112
	DATA	.string<>+80(SB)/8,$"o argv\zS"
	DATA	.string<>+88(SB)/8,$"srdiIlxe"
	DATA	.string<>+96(SB)/8,$"pvVc:1m:"
	DATA	.string<>+104(SB)/8,$"1[comman"
	MOVL	argc+0(FP),CX
	MOVL	CX,(SP)
	MOVL	argv+4(FP),CX
	MOVL	CX,4(SP)
	MOVL	$.string<>+87(SB),CX
	MOVL	CX,8(SP)
	MOVL	$1,CX
	MOVL	CX,12(SP)
	CALL	,getflags+0(SB)
	MOVL	AX,CX
	CMPL	AX,$-1
	MOVL	AX,argc+0(FP)
	JNE	,5(PC)
	DATA	.string<>+112(SB)/8,$"d]\z[file"
	DATA	.string<>+120(SB)/8,$" [arg .."
	MOVL	$.string<>+115(SB),AX
	MOVL	AX,(SP)
	CALL	,usage+0(SB)
	MOVL	argc+0(FP),CX
	MOVL	argv+4(FP),AX
	MOVL	(AX),AX
	MOVBLSX	(AX),AX
	CMPL	AX,$45
	JNE	,3(PC)
	MOVL	$flagset+0(SB),AX
	MOVL	AX,flag+432(SB)
	CMPL	flag+292(SB),$0
	JEQ	,3(PC)
	MOVL	$0,flag+420(SB)
	JMP	,13(PC)
	CMPL	flag+420(SB),$0
	JNE	,3(PC)
	CMPL	CX,$1
	JEQ	,2(PC)
	JMP	,5(PC)
	MOVL	$0,(SP)
	CALL	,Isatty+0(SB)
	CMPL	AX,$0
	JNE	,2(PC)
	JMP	,3(PC)
	MOVL	$flagset+0(SB),AX
	MOVL	AX,flag+420(SB)
	CMPL	flag+436(SB),$0
	JEQ	,4(PC)
	MOVL	flag+436(SB),AX
	MOVL	(AX),AX
	JMP	,2(PC)
	MOVL	$Rcmain+0(SB),AX
	MOVL	AX,rcmain+-84(SP)
	MOVL	$2,CX
	MOVL	CX,(SP)
	CALL	,openfd+0(SB)
	MOVL	AX,err+0(SB)
	CALL	,kinit+0(SB)
	CALL	,Trapinit+0(SB)
	CALL	,Vinit+0(SB)
	CALL	,getpid+0(SB)
	MOVL	AX,mypid+0(SB)
	MOVL	AX,.safe+-96(SP)
	LEAL	num+-80(SP),AX
	MOVL	AX,(SP)
	MOVL	.safe+-96(SP),AX
	MOVL	AX,4(SP)
	CALL	,inttoascii+0(SB)
	DATA	.string<>+128(SB)/8,$".]]\zpid\z"
	LEAL	num+-80(SP),CX
	MOVL	CX,(SP)
	MOVL	$0,4(SP)
	CALL	,newword+0(SB)
	MOVL	AX,.safe+-96(SP)
	MOVL	$.string<>+132(SB),AX
	MOVL	AX,(SP)
	MOVL	.safe+-96(SP),AX
	MOVL	AX,4(SP)
	CALL	,setvar+0(SB)
	CMPL	flag+396(SB),$0
	JEQ	,7(PC)
	MOVL	flag+396(SB),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	MOVL	$0,4(SP)
	CALL	,newword+0(SB)
	JMP	,2(PC)
	MOVL	$0,AX
	MOVL	AX,.safe+-96(SP)
	MOVL	$.string<>+136(SB),AX
	MOVL	AX,(SP)
	MOVL	.safe+-96(SP),AX
	MOVL	AX,4(SP)
	CALL	,setvar+0(SB)
	DATA	.string<>+136(SB)/8,$"cflag\zrc"
	MOVL	argv+4(FP),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	MOVL	$0,4(SP)
	CALL	,newword+0(SB)
	MOVL	AX,.safe+-96(SP)
	MOVL	$.string<>+142(SB),AX
	MOVL	AX,(SP)
	MOVL	.safe+-96(SP),AX
	MOVL	AX,4(SP)
	CALL	,setvar+0(SB)
	MOVL	$0,BX
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$1,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xmark+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xword+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$.string<>+149(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xassign+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xmark+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xmark+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xword+0(SB),CX
	MOVL	CX,(AX)
	DATA	.string<>+144(SB)/8,$"name\z*\z*"
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$.string<>+151(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xdol+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xword+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	rcmain+-84(SP),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xword+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$.string<>+153(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xsimple+0(SB),CX
	MOVL	CX,(AX)
	MOVL	BX,AX
	INCL	,BX
	LEAL	bootstrap+-68(SP),CX
	LEAL	(CX)(AX*4),AX
	MOVL	$Xexit+0(SB),CX
	MOVL	CX,(AX)
	MOVL	$0,bootstrap+-68(SP)(BX*4)
	LEAL	bootstrap+-68(SP),AX
	MOVL	AX,(SP)
	MOVL	$1,AX
	MOVL	AX,4(SP)
	MOVL	$0,8(SP)
	CALL	,start+0(SB)
	CALL	,pushlist+0(SB)
	MOVL	argv+4(FP),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,strdup+0(SB)
	MOVL	AX,argv0+0(SB)
	MOVL	argc+0(FP),DX
	DECL	,DX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,12(PC)
	DECL	,DX
	CMPL	DX,$0
	JEQ	,-3(PC)
	MOVL	DX,CX
	MOVL	DX,i+-88(SP)
	MOVL	argv+4(FP),DX
	MOVL	(DX)(CX*4),AX
	MOVL	AX,(SP)
	CALL	,pushword+0(SB)
	MOVL	i+-88(SP),DX
	JMP	,-12(PC)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,21(PC)
	CMPL	flag+456(SB),$0
	JEQ	,6(PC)
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	runq+0(SB),AX
	MOVL	AX,4(SP)
	CALL	,pfnc+0(SB)
	MOVL	runq+0(SB),AX
	INCL	,4(AX)
	MOVL	runq+0(SB),AX
	MOVL	4(AX),AX
	MOVL	runq+0(SB),CX
	MOVL	(CX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	-4(AX),AX
	CALL	,AX
	CMPL	ntrap+0(SB),$0
	JEQ	,2(PC)
	CALL	,dotrap+0(SB)
	JMP	,-21(PC)
	RET	,
	TEXT	Xappend+0(SB),0,$28
	JMP	,11(PC)
	JMP	,20(PC)
	DATA	.string<>+152(SB)/8,$"\z.\z>> re"
	DATA	.string<>+160(SB)/8,$"quires s"
	DATA	.string<>+168(SB)/8,$"ingleton"
	MOVL	$.string<>+155(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	DATA	.string<>+176(SB)/8,$"\z>> requ"
	DATA	.string<>+184(SB)/8,$"ires fil"
	MOVL	$.string<>+177(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	JMP	,-9(PC)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$0
	JEQ	,-11(PC)
	CMPL	AX,$1
	JEQ	,-9(PC)
	JMP	,-18(PC)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),AX
	MOVL	AX,file+-4(SP)
	MOVL	AX,(SP)
	MOVL	$1,CX
	MOVL	CX,4(SP)
	CALL	,open+0(SB)
	MOVL	AX,CX
	CMPL	AX,$0
	JGE	,7(PC)
	MOVL	file+-4(SP),CX
	MOVL	CX,(SP)
	CALL	,Creat+0(SB)
	MOVL	AX,CX
	CMPL	AX,$0
	JLT	,2(PC)
	JMP	,12(PC)
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+194(SB),AX
	MOVL	AX,4(SP)
	MOVL	file+-4(SP),AX
	MOVL	AX,8(SP)
	CALL	,pfmt+0(SB)
	DATA	.string<>+192(SB)/8,$"e\z%s: \zc"
	DATA	.string<>+200(SB)/8,$"an't ope"
	MOVL	$.string<>+199(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror+0(SB)
	RET	,
	MOVL	CX,f+-8(SP)
	MOVL	CX,(SP)
	MOVL	$0,4(SP)
	MOVL	$2,AX
	MOVL	AX,8(SP)
	CALL	,Seek+0(SB)
	MOVL	runq+0(SB),DX
	MOVL	$1,AX
	MOVL	AX,(SP)
	MOVL	f+-8(SP),AX
	MOVL	AX,4(SP)
	MOVL	4(DX),AX
	MOVL	(DX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,8(SP)
	CALL	,pushredir+0(SB)
	MOVL	runq+0(SB),AX
	INCL	,4(AX)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	Xsettrue+0(SB),0,$8
	MOVL	$.string<>+210(SB),AX
	MOVL	AX,(SP)
	CALL	,setstatus+0(SB)
	RET	,
	TEXT	Xbang+0(SB),0,$12
	DATA	.string<>+208(SB)/8,$"n\z\zfalse"
	CALL	,truestatus+0(SB)
	CMPL	AX,$0
	JEQ	,3(PC)
	MOVL	$.string<>+211(SB),AX
	JMP	,2(PC)
	MOVL	$.string<>+217(SB),AX
	MOVL	AX,.safe+-4(SP)
	MOVL	.safe+-4(SP),AX
	MOVL	AX,(SP)
	CALL	,setstatus+0(SB)
	RET	,
	TEXT	Xclose+0(SB),0,$16
	MOVL	runq+0(SB),DX
	MOVL	$3,AX
	MOVL	AX,(SP)
	MOVL	4(DX),AX
	MOVL	(DX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(SP)
	MOVL	$0,8(SP)
	CALL	,pushredir+0(SB)
	MOVL	runq+0(SB),AX
	INCL	,4(AX)
	RET	,
	TEXT	Xdup+0(SB),0,$16
	MOVL	runq+0(SB),BX
	MOVL	$2,AX
	MOVL	AX,(SP)
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(SP)
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	4(AX),AX
	MOVL	AX,8(SP)
	CALL	,pushredir+0(SB)
	MOVL	runq+0(SB),AX
	ADDL	$2,4(AX)
	RET	,
	TEXT	Xeflag+0(SB),0,$0
	CMPL	eflagok+0(SB),$0
	JEQ	,4(PC)
	CALL	,truestatus+0(SB)
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,2(PC)
	CALL	,Xexit+0(SB)
	RET	,
	TEXT	Xexit+0(SB),0,$32
	CALL	,getpid+0(SB)
	CMPL	AX,mypid+0(SB)
	JNE	,3(PC)
	CMPL	beenhere$25<>+0(SB),$0
	JEQ	,2(PC)
	JMP	,48(PC)
	DATA	.string<>+216(SB)/8,$"\z\zsigexi"
	MOVL	$.string<>+218(SB),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	AX,trapreq+-4(SP)
	MOVL	12(AX),AX
	CMPL	AX,$0
	JEQ	,41(PC)
	MOVL	$1,beenhere$25<>+0(SB)
	MOVL	runq+0(SB),AX
	DECL	,4(AX)
	MOVL	$.string<>+226(SB),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	trapreq+-4(SP),CX
	MOVL	4(AX),AX
	MOVL	AX,starval+-8(SP)
	MOVL	12(CX),AX
	MOVL	AX,(SP)
	MOVL	20(CX),AX
	MOVL	AX,4(SP)
	MOVL	$0,8(SP)
	CALL	,start+0(SB)
	MOVL	$.string<>+228(SB),CX
	MOVL	CX,(SP)
	CALL	,strdup+0(SB)
	MOVL	AX,.safe+-16(SP)
	MOVL	.safe+-16(SP),CX
	MOVL	CX,(SP)
	MOVL	runq+0(SB),CX
	MOVL	20(CX),CX
	MOVL	CX,4(SP)
	CALL	,newvar+0(SB)
	MOVL	runq+0(SB),CX
	MOVL	AX,20(CX)
	MOVL	starval+-8(SP),CX
	MOVL	CX,(SP)
	MOVL	$0,4(SP)
	CALL	,copywords+0(SB)
	MOVL	runq+0(SB),BX
	MOVL	20(BX),CX
	MOVL	AX,4(CX)
	MOVL	20(BX),AX
	MOVL	$1,8(AX)
	MOVL	$0,16(BX)
	MOVL	$0,CX
	MOVL	CX,12(BX)
	RET	,
	CALL	,getstatus+0(SB)
	MOVL	AX,.safe+-16(SP)
	MOVL	.safe+-16(SP),AX
	MOVL	AX,(SP)
	CALL	,Exit+0(SB)
	RET	,
	TEXT	Xfalse+0(SB),0,$0
	CALL	,truestatus+0(SB)
	MOVL	runq+0(SB),BX
	CMPL	AX,$0
	JEQ	,7(PC)
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(BX)
	JMP	,2(PC)
	INCL	,4(BX)
	RET	,
	TEXT	Xifnot+0(SB),0,$0
	MOVL	runq+0(SB),BX
	CMPL	ifnot+0(SB),$0
	JEQ	,3(PC)
	INCL	,4(BX)
	JMP	,6(PC)
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(BX)
	RET	,
	TEXT	Xjump+0(SB),0,$0
	MOVL	runq+0(SB),BX
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(BX)
	RET	,
	TEXT	Xmark+0(SB),0,$0
	CALL	,pushlist+0(SB)
	RET	,
	TEXT	Xpopm+0(SB),0,$0
	CALL	,poplist+0(SB)
	RET	,
	TEXT	Xread+0(SB),0,$28
	JMP	,11(PC)
	JMP	,20(PC)
	DATA	.string<>+224(SB)/8,$"t\z*\z*\z< "
	DATA	.string<>+232(SB)/8,$"requires"
	DATA	.string<>+240(SB)/8,$" singlet"
	MOVL	$.string<>+230(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	DATA	.string<>+248(SB)/8,$"on\n\z< re"
	DATA	.string<>+256(SB)/8,$"quires f"
	MOVL	$.string<>+252(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	JMP	,-9(PC)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$0
	JEQ	,-11(PC)
	CMPL	AX,$1
	JEQ	,-9(PC)
	JMP	,-18(PC)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),AX
	MOVL	AX,file+-4(SP)
	MOVL	AX,(SP)
	MOVL	$0,4(SP)
	CALL	,open+0(SB)
	MOVL	runq+0(SB),DX
	MOVL	AX,CX
	CMPL	AX,$0
	JGE	,12(PC)
	DATA	.string<>+264(SB)/8,$"ile\n\z%s:"
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+269(SB),AX
	MOVL	AX,4(SP)
	MOVL	file+-4(SP),AX
	MOVL	AX,8(SP)
	CALL	,pfmt+0(SB)
	DATA	.string<>+272(SB)/8,$" \zcan't "
	MOVL	$.string<>+274(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror+0(SB)
	RET	,
	MOVL	$1,AX
	MOVL	AX,(SP)
	MOVL	CX,4(SP)
	MOVL	4(DX),AX
	MOVL	(DX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,8(SP)
	CALL	,pushredir+0(SB)
	MOVL	runq+0(SB),AX
	INCL	,4(AX)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	Xrdwr+0(SB),0,$28
	JMP	,11(PC)
	JMP	,20(PC)
	DATA	.string<>+280(SB)/8,$"open\z<> "
	DATA	.string<>+288(SB)/8,$"requires"
	DATA	.string<>+296(SB)/8,$" singlet"
	MOVL	$.string<>+285(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	DATA	.string<>+304(SB)/8,$"on\n\z<> r"
	DATA	.string<>+312(SB)/8,$"equires "
	MOVL	$.string<>+308(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	JMP	,-9(PC)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$0
	JEQ	,-11(PC)
	CMPL	AX,$1
	JEQ	,-9(PC)
	JMP	,-18(PC)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),AX
	MOVL	AX,file+-4(SP)
	MOVL	AX,(SP)
	MOVL	$2,CX
	MOVL	CX,4(SP)
	CALL	,open+0(SB)
	MOVL	runq+0(SB),DX
	MOVL	AX,CX
	CMPL	AX,$0
	JGE	,12(PC)
	DATA	.string<>+320(SB)/8,$"file\n\z%s"
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+326(SB),AX
	MOVL	AX,4(SP)
	MOVL	file+-4(SP),AX
	MOVL	AX,8(SP)
	CALL	,pfmt+0(SB)
	DATA	.string<>+328(SB)/8,$": \zcan't"
	MOVL	$.string<>+331(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror+0(SB)
	RET	,
	MOVL	$1,AX
	MOVL	AX,(SP)
	MOVL	CX,4(SP)
	MOVL	4(DX),AX
	MOVL	(DX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,8(SP)
	CALL	,pushredir+0(SB)
	MOVL	runq+0(SB),AX
	INCL	,4(AX)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	turfredir+0(SB),0,$0
	MOVL	runq+0(SB),DX
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,8(PC)
	MOVL	12(DX),AX
	MOVL	16(DX),CX
	CMPL	AX,CX
	JEQ	,-4(PC)
	CALL	,Xpopredir+0(SB)
	MOVL	runq+0(SB),DX
	JMP	,-8(PC)
	RET	,
	TEXT	Xpopredir+0(SB),0,$20
	MOVL	runq+0(SB),AX
	MOVL	12(AX),DX
	CMPL	DX,$0
	MOVL	DX,rp+-4(SP)
	JNE	,6(PC)
	DATA	.string<>+336(SB)/8,$" open\ztu"
	DATA	.string<>+344(SB)/8,$"rfredir "
	MOVL	$.string<>+342(SB),AX
	MOVL	AX,(SP)
	MOVL	$0,4(SP)
	CALL	,panic+0(SB)
	MOVL	rp+-4(SP),DX
	MOVL	runq+0(SB),AX
	MOVL	8(DX),CX
	MOVL	CX,12(AX)
	MOVBLSX	(DX),AX
	CMPL	AX,$1
	JNE	,5(PC)
	MOVWLSX	2(DX),AX
	MOVL	AX,(SP)
	CALL	,close+0(SB)
	MOVL	rp+-4(SP),DX
	MOVL	DX,(SP)
	CALL	,efree+0(SB)
	RET	,
	TEXT	Xreturn+0(SB),0,$20
	MOVL	runq+0(SB),AX
	MOVL	AX,p+-4(SP)
	CALL	,turfredir+0(SB)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,7(PC)
	MOVL	p+-4(SP),AX
	MOVL	8(AX),AX
	CMPL	AX,$0
	JEQ	,-4(PC)
	CALL	,poplist+0(SB)
	JMP	,-7(PC)
	MOVL	p+-4(SP),AX
	MOVL	(AX),AX
	MOVL	AX,(SP)
	CALL	,codefree+0(SB)
	MOVL	p+-4(SP),CX
	MOVL	184(CX),AX
	MOVL	AX,runq+0(SB)
	MOVL	CX,(SP)
	CALL	,efree+0(SB)
	CMPL	runq+0(SB),$0
	JNE	,6(PC)
	CALL	,getstatus+0(SB)
	MOVL	AX,.safe+-12(SP)
	MOVL	.safe+-12(SP),AX
	MOVL	AX,(SP)
	CALL	,Exit+0(SB)
	RET	,
	TEXT	Xtrue+0(SB),0,$0
	CALL	,truestatus+0(SB)
	MOVL	runq+0(SB),BX
	CMPL	AX,$0
	JEQ	,3(PC)
	INCL	,4(BX)
	JMP	,6(PC)
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(BX)
	RET	,
	TEXT	Xif+0(SB),0,$0
	MOVL	$1,ifnot+0(SB)
	CALL	,truestatus+0(SB)
	MOVL	runq+0(SB),BX
	CMPL	AX,$0
	JEQ	,3(PC)
	INCL	,4(BX)
	JMP	,6(PC)
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(BX)
	RET	,
	TEXT	Xwastrue+0(SB),0,$0
	MOVL	$0,ifnot+0(SB)
	RET	,
	TEXT	Xword+0(SB),0,$8
	MOVL	runq+0(SB),DX
	MOVL	4(DX),AX
	INCL	,4(DX)
	MOVL	(DX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,(SP)
	CALL	,pushword+0(SB)
	RET	,
	TEXT	Xwrite+0(SB),0,$28
	JMP	,11(PC)
	JMP	,20(PC)
	DATA	.string<>+352(SB)/8,$"null!\z> "
	DATA	.string<>+360(SB)/8,$"requires"
	DATA	.string<>+368(SB)/8,$" singlet"
	MOVL	$.string<>+358(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	DATA	.string<>+376(SB)/8,$"on\n\z> re"
	DATA	.string<>+384(SB)/8,$"quires f"
	MOVL	$.string<>+380(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	JMP	,-9(PC)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$0
	JEQ	,-11(PC)
	CMPL	AX,$1
	JEQ	,-9(PC)
	JMP	,-18(PC)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),AX
	MOVL	AX,file+-4(SP)
	MOVL	AX,(SP)
	CALL	,Creat+0(SB)
	MOVL	runq+0(SB),DX
	MOVL	AX,CX
	CMPL	AX,$0
	JGE	,12(PC)
	DATA	.string<>+392(SB)/8,$"ile\n\z%s:"
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+397(SB),AX
	MOVL	AX,4(SP)
	MOVL	file+-4(SP),AX
	MOVL	AX,8(SP)
	CALL	,pfmt+0(SB)
	DATA	.string<>+400(SB)/8,$" \zcan't "
	MOVL	$.string<>+402(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror+0(SB)
	RET	,
	MOVL	$1,AX
	MOVL	AX,(SP)
	MOVL	CX,4(SP)
	MOVL	4(DX),AX
	MOVL	(DX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,8(SP)
	CALL	,pushredir+0(SB)
	MOVL	runq+0(SB),AX
	INCL	,4(AX)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	list2str+0(SB),0,$32
	MOVL	$0,len+-16(SP)
	MOVL	words+0(FP),DX
	JMP	,5(PC)
	JMP	,2(PC)
	JMP	,12(PC)
	MOVL	ap+-20(SP),AX
	MOVL	4(AX),DX
	CMPL	DX,$0
	JEQ	,-4(PC)
	MOVL	DX,ap+-20(SP)
	MOVL	(DX),CX
	MOVL	CX,(SP)
	CALL	,strlen+0(SB)
	INCL	,AX
	ADDL	AX,len+-16(SP)
	JMP	,-12(PC)
	MOVL	len+-16(SP),CX
	INCL	,CX
	MOVL	CX,(SP)
	CALL	,emalloc+0(SB)
	MOVL	AX,SI
	MOVL	AX,DX
	MOVL	words+0(FP),BP
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,22(PC)
	MOVL	4(BP),BP
	CMPL	BP,$0
	JEQ	,-3(PC)
	MOVL	(BP),BX
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,11(PC)
	MOVBLSX	(BX),AX
	CMPB	AX,$0
	JEQ	,-3(PC)
	MOVL	DX,AX
	INCL	,DX
	MOVL	BX,CX
	INCL	,BX
	MOVBLSX	(CX),CX
	MOVB	CX,(AX)
	JMP	,-11(PC)
	MOVL	DX,AX
	INCL	,DX
	MOVB	$32,(AX)
	JMP	,-22(PC)
	CMPL	DX,SI
	JNE	,3(PC)
	MOVB	$0,(DX)
	JMP	,2(PC)
	MOVB	$0,-1(DX)
	MOVL	SI,AX
	RET	,
	RET	,
	TEXT	Xmatch+0(SB),0,$28
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,list2str+0(SB)
	MOVL	AX,subject+-8(SP)
	DATA	.string<>+408(SB)/8,$"open\zno "
	MOVL	$.string<>+413(SB),AX
	MOVL	AX,(SP)
	CALL	,setstatus+0(SB)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	4(AX),AX
	MOVL	(AX),DX
	JMP	,5(PC)
	JMP	,2(PC)
	JMP	,19(PC)
	MOVL	p+-4(SP),AX
	MOVL	4(AX),DX
	CMPL	DX,$0
	JEQ	,-4(PC)
	MOVL	subject+-8(SP),CX
	MOVL	CX,(SP)
	MOVL	DX,p+-4(SP)
	MOVL	(DX),CX
	MOVL	CX,4(SP)
	MOVL	$0,8(SP)
	CALL	,match+0(SB)
	CMPL	AX,$0
	JEQ	,5(PC)
	MOVL	$.string<>+422(SB),AX
	MOVL	AX,(SP)
	CALL	,setstatus+0(SB)
	JMP	,-17(PC)
	JMP	,-19(PC)
	MOVL	subject+-8(SP),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	CALL	,poplist+0(SB)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	Xcase+0(SB),0,$32
	MOVL	$0,ok+-12(SP)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	4(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,list2str+0(SB)
	MOVL	AX,s+-8(SP)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),DX
	JMP	,5(PC)
	JMP	,2(PC)
	JMP	,17(PC)
	MOVL	p+-4(SP),AX
	MOVL	4(AX),DX
	CMPL	DX,$0
	JEQ	,-4(PC)
	MOVL	s+-8(SP),CX
	MOVL	CX,(SP)
	MOVL	DX,p+-4(SP)
	MOVL	(DX),CX
	MOVL	CX,4(SP)
	MOVL	$0,8(SP)
	CALL	,match+0(SB)
	CMPL	AX,$0
	JEQ	,3(PC)
	MOVL	$1,ok+-12(SP)
	JMP	,-15(PC)
	JMP	,-17(PC)
	MOVL	s+-8(SP),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	MOVL	runq+0(SB),BX
	CMPL	ok+-12(SP),$0
	JEQ	,3(PC)
	INCL	,4(BX)
	JMP	,6(PC)
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(BX)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	conclist+0(SB),0,$32
	MOVL	lp+0(FP),BP
	MOVL	rp+4(FP),BX
	MOVL	4(BP),AX
	CMPL	AX,$0
	JNE	,5(PC)
	MOVL	4(BX),AX
	CMPL	AX,$0
	JNE	,2(PC)
	JMP	,20(PC)
	MOVL	4(BP),DX
	CMPL	DX,$0
	JNE	,3(PC)
	MOVL	BP,CX
	JMP	,2(PC)
	MOVL	4(BP),CX
	MOVL	CX,(SP)
	MOVL	4(BX),DX
	CMPL	DX,$0
	JNE	,3(PC)
	MOVL	BX,CX
	JMP	,2(PC)
	MOVL	4(BX),CX
	MOVL	CX,4(SP)
	MOVL	tail+8(FP),CX
	MOVL	CX,8(SP)
	CALL	,conclist+0(SB)
	MOVL	lp+0(FP),BP
	MOVL	AX,tail+8(FP)
	MOVL	(BP),CX
	MOVL	CX,(SP)
	CALL	,strlen+0(SB)
	MOVL	AX,.safe+-20(SP)
	MOVL	rp+4(FP),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,strlen+0(SB)
	ADDL	.safe+-20(SP),AX
	INCL	,AX
	MOVL	AX,.safe+-16(SP)
	MOVL	.safe+-16(SP),CX
	MOVL	CX,(SP)
	CALL	,emalloc+0(SB)
	MOVL	AX,buf+-4(SP)
	MOVL	AX,(SP)
	MOVL	lp+0(FP),AX
	MOVL	(AX),AX
	MOVL	AX,4(SP)
	CALL	,strcpy+0(SB)
	MOVL	buf+-4(SP),AX
	MOVL	AX,(SP)
	MOVL	rp+4(FP),AX
	MOVL	(AX),AX
	MOVL	AX,4(SP)
	CALL	,strcat+0(SB)
	MOVL	buf+-4(SP),CX
	MOVL	CX,(SP)
	MOVL	tail+8(FP),CX
	MOVL	CX,4(SP)
	CALL	,newword+0(SB)
	MOVL	AX,v+-8(SP)
	MOVL	buf+-4(SP),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	MOVL	v+-8(SP),AX
	RET	,
	RET	,
	TEXT	Xconc+0(SB),0,$40
	MOVL	runq+0(SB),CX
	MOVL	8(CX),AX
	MOVL	(AX),DX
	MOVL	8(CX),AX
	MOVL	4(AX),AX
	MOVL	(AX),AX
	MOVL	AX,rp+-8(SP)
	MOVL	8(CX),AX
	MOVL	4(AX),AX
	MOVL	4(AX),AX
	MOVL	(AX),AX
	MOVL	AX,vp+-12(SP)
	MOVL	DX,lp+-4(SP)
	MOVL	DX,(SP)
	CALL	,count+0(SB)
	MOVL	AX,lc+-16(SP)
	MOVL	rp+-8(SP),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	MOVL	lc+-16(SP),DX
	MOVL	AX,CX
	CMPL	DX,$0
	JNE	,4(PC)
	CMPL	CX,$0
	JNE	,2(PC)
	JMP	,30(PC)
	CMPL	DX,$0
	JEQ	,4(PC)
	CMPL	CX,$0
	JEQ	,2(PC)
	JMP	,5(PC)
	DATA	.string<>+416(SB)/8,$"match\z\zn"
	DATA	.string<>+424(SB)/8,$"ull list"
	DATA	.string<>+432(SB)/8,$" in conc"
	DATA	.string<>+440(SB)/8,$"atenatio"
	MOVL	$.string<>+423(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	CMPL	DX,$1
	JEQ	,3(PC)
	CMPL	CX,$1
	JNE	,2(PC)
	JMP	,3(PC)
	CMPL	DX,CX
	JNE	,2(PC)
	JMP	,5(PC)
	DATA	.string<>+448(SB)/8,$"n\zmismat"
	DATA	.string<>+456(SB)/8,$"ched lis"
	DATA	.string<>+464(SB)/8,$"t length"
	DATA	.string<>+472(SB)/8,$"s in con"
	DATA	.string<>+480(SB)/8,$"catenati"
	MOVL	$.string<>+450(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	MOVL	lp+-4(SP),CX
	MOVL	CX,(SP)
	MOVL	rp+-8(SP),CX
	MOVL	CX,4(SP)
	MOVL	vp+-12(SP),CX
	MOVL	CX,8(SP)
	CALL	,conclist+0(SB)
	MOVL	AX,vp+-12(SP)
	CALL	,poplist+0(SB)
	CALL	,poplist+0(SB)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	vp+-12(SP),CX
	MOVL	CX,(AX)
	RET	,
	TEXT	Xassign+0(SB),0,$16
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$1
	JEQ	,5(PC)
	DATA	.string<>+488(SB)/8,$"on\zvaria"
	DATA	.string<>+496(SB)/8,$"ble name"
	DATA	.string<>+504(SB)/8,$" not sin"
	DATA	.string<>+512(SB)/8,$"gleton!\z"
	MOVL	$.string<>+491(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),AX
	MOVL	AX,(SP)
	CALL	,deglob+0(SB)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	AX,v+-4(SP)
	CALL	,poplist+0(SB)
	CALL	,globlist+0(SB)
	MOVL	v+-4(SP),AX
	MOVL	4(AX),AX
	MOVL	AX,(SP)
	CALL	,freewords+0(SB)
	MOVL	runq+0(SB),BX
	MOVL	v+-4(SP),DX
	MOVL	8(BX),CX
	MOVL	(CX),CX
	MOVL	CX,4(DX)
	MOVL	$1,8(DX)
	MOVL	8(BX),AX
	MOVL	$0,(AX)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	copywords+0(SB),0,$24
	MOVL	a+0(FP),DX
	MOVL	$0,v+-4(SP)
	LEAL	v+-4(SP),AX
	MOVL	AX,CX
	MOVL	AX,end+-8(SP)
	JMP	,8(PC)
	JMP	,2(PC)
	JMP	,16(PC)
	MOVL	a+0(FP),AX
	MOVL	4(AX),DX
	MOVL	(BX),CX
	ADDL	$4,CX
	MOVL	CX,end+-8(SP)
	CMPL	DX,$0
	JEQ	,-7(PC)
	MOVL	DX,a+0(FP)
	MOVL	(DX),CX
	MOVL	CX,(SP)
	MOVL	$0,4(SP)
	CALL	,newword+0(SB)
	MOVL	end+-8(SP),BX
	MOVL	AX,(BX)
	JMP	,-16(PC)
	MOVL	CX,AX
	MOVL	tail+4(FP),CX
	MOVL	CX,(AX)
	MOVL	v+-4(SP),AX
	RET	,
	RET	,
	TEXT	Xdol+0(SB),0,$40
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$1
	JEQ	,5(PC)
	DATA	.string<>+520(SB)/8,$"variable"
	DATA	.string<>+528(SB)/8,$" name no"
	DATA	.string<>+536(SB)/8,$"t single"
	MOVL	$.string<>+520(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),CX
	MOVL	CX,s+-12(SP)
	MOVL	CX,(SP)
	CALL	,deglob+0(SB)
	MOVL	s+-12(SP),DX
	MOVL	$0,CX
	MOVL	DX,BX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,16(PC)
	INCL	,DX
	MOVBLSX	(DX),AX
	CMPL	AX,$48
	JLT	,4(PC)
	MOVBLSX	(DX),AX
	CMPL	AX,$57
	JLE	,2(PC)
	JMP	,-8(PC)
	LEAL	(CX)(CX*4),AX
	ADDL	AX,AX
	MOVBLSX	(DX),CX
	ADDL	CX,AX
	ADDL	$-48,AX
	MOVL	AX,CX
	JMP	,-16(PC)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	4(AX),AX
	MOVL	(AX),AX
	MOVL	AX,a+-4(SP)
	CMPL	CX,$0
	MOVL	CX,n+-20(SP)
	JEQ	,5(PC)
	MOVBLSX	(DX),AX
	CMPB	AX,$0
	JNE	,2(PC)
	JMP	,12(PC)
	MOVL	BX,(SP)
	CALL	,vlook+0(SB)
	MOVL	4(AX),AX
	MOVL	AX,.safe+-28(SP)
	MOVL	.safe+-28(SP),CX
	MOVL	CX,(SP)
	MOVL	a+-4(SP),CX
	MOVL	CX,4(SP)
	CALL	,copywords+0(SB)
	MOVL	AX,a+-4(SP)
	JMP	,32(PC)
	MOVL	$.string<>+549(SB),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	4(AX),AX
	CMPL	AX,$0
	JEQ	,3(PC)
	CMPL	n+-20(SP),$1
	JGE	,2(PC)
	JMP	,8(PC)
	MOVL	AX,star+-8(SP)
	MOVL	AX,(SP)
	CALL	,count+0(SB)
	MOVL	n+-20(SP),CX
	MOVL	star+-8(SP),DX
	CMPL	CX,AX
	JLE	,2(PC)
	JMP	,15(PC)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,6(PC)
	DECL	,CX
	CMPL	CX,$0
	JEQ	,-3(PC)
	MOVL	4(DX),DX
	JMP	,-6(PC)
	MOVL	(DX),CX
	MOVL	CX,(SP)
	MOVL	a+-4(SP),CX
	MOVL	CX,4(SP)
	CALL	,newword+0(SB)
	MOVL	AX,a+-4(SP)
	CALL	,poplist+0(SB)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	a+-4(SP),CX
	MOVL	CX,(AX)
	RET	,
	TEXT	Xqdol+0(SB),0,$32
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$1
	JEQ	,5(PC)
	DATA	.string<>+544(SB)/8,$"ton!\z*\zv"
	DATA	.string<>+552(SB)/8,$"ariable "
	DATA	.string<>+560(SB)/8,$"name not"
	DATA	.string<>+568(SB)/8,$" singlet"
	MOVL	$.string<>+551(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),CX
	MOVL	CX,s+-12(SP)
	MOVL	CX,(SP)
	CALL	,deglob+0(SB)
	MOVL	s+-12(SP),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	4(AX),AX
	MOVL	AX,a+-4(SP)
	CALL	,poplist+0(SB)
	MOVL	a+-4(SP),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	MOVL	AX,n+-16(SP)
	CMPL	n+-16(SP),$0
	JNE	,5(PC)
	MOVL	$.string<>+580(SB),AX
	MOVL	AX,(SP)
	CALL	,pushword+0(SB)
	RET	,
	MOVL	a+-4(SP),DX
	JMP	,5(PC)
	JMP	,2(PC)
	JMP	,11(PC)
	MOVL	p+-8(SP),AX
	MOVL	4(AX),DX
	CMPL	DX,$0
	JEQ	,-4(PC)
	MOVL	DX,p+-8(SP)
	MOVL	(DX),CX
	MOVL	CX,(SP)
	CALL	,strlen+0(SB)
	ADDL	AX,n+-16(SP)
	JMP	,-11(PC)
	MOVL	n+-16(SP),CX
	MOVL	CX,(SP)
	CALL	,emalloc+0(SB)
	MOVL	a+-4(SP),CX
	MOVL	AX,DX
	CMPL	CX,$0
	JEQ	,30(PC)
	MOVL	DX,s+-12(SP)
	MOVL	DX,(SP)
	MOVL	(CX),AX
	MOVL	AX,4(SP)
	CALL	,strcpy+0(SB)
	MOVL	s+-12(SP),DX
	MOVL	a+-4(SP),AX
	MOVL	4(AX),CX
	JMP	,5(PC)
	JMP	,2(PC)
	JMP	,18(PC)
	MOVL	p+-8(SP),AX
	MOVL	4(AX),CX
	CMPL	CX,$0
	MOVL	CX,p+-8(SP)
	JEQ	,-5(PC)
	MOVL	DX,(SP)
	MOVL	$.string<>+581(SB),AX
	MOVL	AX,4(SP)
	CALL	,strcat+0(SB)
	MOVL	s+-12(SP),AX
	MOVL	AX,(SP)
	MOVL	p+-8(SP),AX
	MOVL	(AX),AX
	MOVL	AX,4(SP)
	CALL	,strcat+0(SB)
	MOVL	s+-12(SP),DX
	JMP	,-18(PC)
	JMP	,2(PC)
	MOVB	$0,(AX)
	MOVL	DX,s+-12(SP)
	MOVL	DX,(SP)
	CALL	,pushword+0(SB)
	MOVL	s+-12(SP),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	RET	,
	TEXT	copynwords+0(SB),0,$24
	MOVL	a+0(FP),DX
	MOVL	$0,v+-4(SP)
	LEAL	v+-4(SP),AX
	MOVL	AX,CX
	MOVL	AX,end+-8(SP)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,18(PC)
	MOVL	n+8(FP),AX
	DECL	,n+8(FP)
	CMPL	AX,$0
	JLE	,-4(PC)
	MOVL	DX,a+0(FP)
	MOVL	(DX),CX
	MOVL	CX,(SP)
	MOVL	$0,4(SP)
	CALL	,newword+0(SB)
	MOVL	end+-8(SP),DX
	MOVL	AX,(DX)
	MOVL	(DX),CX
	ADDL	$4,CX
	MOVL	CX,end+-8(SP)
	MOVL	a+0(FP),AX
	MOVL	4(AX),DX
	JMP	,-18(PC)
	MOVL	CX,AX
	MOVL	tail+4(FP),CX
	MOVL	CX,(AX)
	MOVL	v+-4(SP),AX
	RET	,
	RET	,
	TEXT	subwords+0(SB),0,$36
	MOVL	sub+8(FP),BX
	MOVL	a+12(FP),DX
	CMPL	BX,$0
	JNE	,3(PC)
	MOVL	DX,AX
	RET	,
	MOVL	val+0(FP),CX
	MOVL	CX,(SP)
	MOVL	len+4(FP),CX
	MOVL	CX,4(SP)
	MOVL	4(BX),CX
	MOVL	CX,8(SP)
	MOVL	DX,12(SP)
	CALL	,subwords+0(SB)
	MOVL	AX,a+12(FP)
	MOVL	sub+8(FP),AX
	MOVL	(AX),CX
	MOVL	CX,s+-12(SP)
	MOVL	CX,(SP)
	CALL	,deglob+0(SB)
	MOVL	len+4(FP),DI
	MOVL	val+0(FP),SI
	MOVL	s+-12(SP),DX
	MOVL	$0,BP
	MOVL	$0,BX
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,17(PC)
	MOVBLSX	(DX),AX
	CMPL	AX,$48
	JLT	,4(PC)
	MOVBLSX	(DX),AX
	CMPL	AX,$57
	JLE	,2(PC)
	JMP	,-7(PC)
	LEAL	(BX)(BX*4),AX
	ADDL	AX,AX
	MOVL	DX,CX
	INCL	,DX
	MOVBLSX	(CX),CX
	ADDL	CX,AX
	ADDL	$-48,AX
	MOVL	AX,BX
	JMP	,-17(PC)
	MOVBLSX	(DX),AX
	CMPL	AX,$45
	JNE	,29(PC)
	INCL	,DX
	MOVBLSX	(DX),AX
	CMPL	AX,$0
	JNE	,4(PC)
	MOVL	DI,BP
	SUBL	BX,BP
	JMP	,22(PC)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,18(PC)
	MOVBLSX	(DX),AX
	CMPL	AX,$48
	JLT	,4(PC)
	MOVBLSX	(DX),AX
	CMPL	AX,$57
	JLE	,2(PC)
	JMP	,-7(PC)
	MOVL	BP,AX
	LEAL	(AX)(BP*4),AX
	ADDL	AX,AX
	MOVL	DX,CX
	INCL	,DX
	MOVBLSX	(CX),CX
	ADDL	CX,AX
	ADDL	$-48,AX
	MOVL	AX,BP
	JMP	,-18(PC)
	SUBL	BX,BP
	CMPL	BX,$1
	JLT	,3(PC)
	CMPL	BX,DI
	JLE	,2(PC)
	JMP	,4(PC)
	CMPL	BP,$0
	JLT	,2(PC)
	JMP	,3(PC)
	MOVL	a+12(FP),AX
	RET	,
	MOVL	BX,AX
	ADDL	BP,AX
	CMPL	AX,DI
	JLE	,3(PC)
	MOVL	DI,BP
	SUBL	BX,BP
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,6(PC)
	DECL	,BX
	CMPL	BX,$0
	JLE	,-3(PC)
	MOVL	4(SI),SI
	JMP	,-6(PC)
	MOVL	SI,(SP)
	MOVL	a+12(FP),CX
	MOVL	CX,4(SP)
	MOVL	BP,CX
	INCL	,CX
	MOVL	CX,8(SP)
	CALL	,copynwords+0(SB)
	RET	,
	RET	,
	TEXT	Xsub+0(SB),0,$40
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	4(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$1
	JEQ	,5(PC)
	DATA	.string<>+576(SB)/8,$"on!\z\z \zv"
	DATA	.string<>+584(SB)/8,$"ariable "
	DATA	.string<>+592(SB)/8,$"name not"
	DATA	.string<>+600(SB)/8,$" singlet"
	MOVL	$.string<>+583(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	4(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),CX
	MOVL	CX,s+-12(SP)
	MOVL	CX,(SP)
	CALL	,deglob+0(SB)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	4(AX),AX
	MOVL	4(AX),AX
	MOVL	(AX),AX
	MOVL	AX,a+-4(SP)
	MOVL	s+-12(SP),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	4(AX),AX
	MOVL	AX,v+-8(SP)
	MOVL	AX,(SP)
	CALL	,count+0(SB)
	MOVL	AX,.safe+-20(SP)
	MOVL	v+-8(SP),CX
	MOVL	CX,(SP)
	MOVL	.safe+-20(SP),CX
	MOVL	CX,4(SP)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,8(SP)
	MOVL	a+-4(SP),CX
	MOVL	CX,12(SP)
	CALL	,subwords+0(SB)
	MOVL	AX,a+-4(SP)
	CALL	,poplist+0(SB)
	CALL	,poplist+0(SB)
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	a+-4(SP),CX
	MOVL	CX,(AX)
	RET	,
	TEXT	Xcount+0(SB),0,$48
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$1
	JEQ	,5(PC)
	DATA	.string<>+608(SB)/8,$"on!\zvari"
	DATA	.string<>+616(SB)/8,$"able nam"
	DATA	.string<>+624(SB)/8,$"e not si"
	DATA	.string<>+632(SB)/8,$"ngleton!"
	MOVL	$.string<>+612(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),CX
	MOVL	CX,s+-8(SP)
	MOVL	CX,(SP)
	CALL	,deglob+0(SB)
	MOVL	s+-8(SP),DX
	MOVL	$0,CX
	MOVL	DX,BX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,16(PC)
	INCL	,DX
	MOVBLSX	(DX),AX
	CMPL	AX,$48
	JLT	,4(PC)
	MOVBLSX	(DX),AX
	CMPL	AX,$57
	JLE	,2(PC)
	JMP	,-8(PC)
	LEAL	(CX)(CX*4),AX
	ADDL	AX,AX
	MOVBLSX	(DX),CX
	ADDL	CX,AX
	ADDL	$-48,AX
	MOVL	AX,CX
	JMP	,-16(PC)
	CMPL	CX,$0
	MOVL	CX,n+-16(SP)
	JEQ	,5(PC)
	MOVBLSX	(DX),AX
	CMPB	AX,$0
	JNE	,2(PC)
	JMP	,13(PC)
	MOVL	BX,(SP)
	CALL	,vlook+0(SB)
	MOVL	4(AX),AX
	MOVL	AX,(SP)
	CALL	,count+0(SB)
	MOVL	AX,.safe+-36(SP)
	LEAL	num+-28(SP),AX
	MOVL	AX,(SP)
	MOVL	.safe+-36(SP),AX
	MOVL	AX,4(SP)
	CALL	,inttoascii+0(SB)
	JMP	,24(PC)
	MOVL	$.string<>+641(SB),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	4(AX),AX
	CMPL	AX,$0
	JEQ	,3(PC)
	CMPL	n+-16(SP),$1
	JGE	,2(PC)
	JMP	,5(PC)
	MOVL	AX,(SP)
	CALL	,count+0(SB)
	CMPL	n+-16(SP),AX
	JLE	,2(PC)
	JMP	,3(PC)
	MOVL	$1,AX
	JMP	,2(PC)
	MOVL	$0,AX
	MOVL	AX,.safe+-36(SP)
	LEAL	num+-28(SP),AX
	MOVL	AX,(SP)
	MOVL	.safe+-36(SP),AX
	MOVL	AX,4(SP)
	CALL	,inttoascii+0(SB)
	CALL	,poplist+0(SB)
	LEAL	num+-28(SP),AX
	MOVL	AX,(SP)
	CALL	,pushword+0(SB)
	RET	,
	TEXT	Xlocal+0(SB),0,$16
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,count+0(SB)
	CMPL	AX,$1
	JEQ	,5(PC)
	DATA	.string<>+640(SB)/8,$"\z*\zvaria"
	DATA	.string<>+648(SB)/8,$"ble name"
	DATA	.string<>+656(SB)/8,$" must be"
	DATA	.string<>+664(SB)/8,$" singlet"
	MOVL	$.string<>+643(SB),AX
	MOVL	AX,(SP)
	CALL	,Xerror1+0(SB)
	RET	,
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),AX
	MOVL	(AX),AX
	MOVL	AX,(SP)
	CALL	,deglob+0(SB)
	MOVL	runq+0(SB),CX
	MOVL	8(CX),CX
	MOVL	(CX),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,strdup+0(SB)
	MOVL	AX,.safe+-4(SP)
	MOVL	.safe+-4(SP),CX
	MOVL	CX,(SP)
	MOVL	runq+0(SB),CX
	MOVL	20(CX),CX
	MOVL	CX,4(SP)
	CALL	,newvar+0(SB)
	MOVL	runq+0(SB),CX
	MOVL	AX,20(CX)
	CALL	,poplist+0(SB)
	CALL	,globlist+0(SB)
	MOVL	runq+0(SB),DX
	MOVL	20(DX),AX
	MOVL	8(DX),CX
	MOVL	(CX),CX
	MOVL	CX,4(AX)
	MOVL	20(DX),AX
	MOVL	$1,8(AX)
	MOVL	8(DX),AX
	MOVL	$0,(AX)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	Xunlocal+0(SB),0,$24
	MOVL	runq+0(SB),AX
	MOVL	20(AX),DX
	CMPL	DX,$0
	MOVL	DX,v+-4(SP)
	JNE	,6(PC)
	DATA	.string<>+672(SB)/8,$"on\n\zXunl"
	DATA	.string<>+680(SB)/8,$"ocal: no"
	DATA	.string<>+688(SB)/8,$" locals!"
	MOVL	$.string<>+676(SB),AX
	MOVL	AX,(SP)
	MOVL	$0,4(SP)
	CALL	,panic+0(SB)
	MOVL	v+-4(SP),DX
	MOVL	runq+0(SB),AX
	MOVL	24(DX),CX
	MOVL	CX,20(AX)
	MOVL	(DX),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	$1,8(AX)
	MOVL	v+-4(SP),AX
	MOVL	(AX),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	MOVL	v+-4(SP),AX
	MOVL	4(AX),AX
	MOVL	AX,(SP)
	CALL	,freewords+0(SB)
	MOVL	v+-4(SP),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	RET	,
	TEXT	freewords+0(SB),0,$16
	MOVL	w+0(FP),CX
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,14(PC)
	CMPL	CX,$0
	JEQ	,-2(PC)
	MOVL	CX,w+0(FP)
	MOVL	(CX),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	MOVL	w+0(FP),CX
	MOVL	4(CX),AX
	MOVL	AX,nw+-4(SP)
	MOVL	CX,(SP)
	CALL	,efree+0(SB)
	MOVL	nw+-4(SP),CX
	JMP	,-14(PC)
	RET	,
	TEXT	Xfn+0(SB),0,$24
	MOVL	runq+0(SB),DX
	MOVL	4(DX),AX
	MOVL	(DX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,end+-12(SP)
	CALL	,globlist+0(SB)
	MOVL	runq+0(SB),BX
	MOVL	8(BX),AX
	MOVL	(AX),DX
	JMP	,5(PC)
	JMP	,2(PC)
	JMP	,29(PC)
	MOVL	a+-8(SP),AX
	MOVL	4(AX),DX
	CMPL	DX,$0
	JEQ	,-4(PC)
	MOVL	DX,a+-8(SP)
	MOVL	(DX),CX
	MOVL	CX,(SP)
	CALL	,gvlook+0(SB)
	MOVL	AX,CX
	MOVL	AX,v+-4(SP)
	MOVL	12(AX),AX
	CMPL	AX,$0
	JEQ	,4(PC)
	MOVL	12(CX),AX
	MOVL	AX,(SP)
	CALL	,codefree+0(SB)
	MOVL	runq+0(SB),CX
	MOVL	(CX),CX
	MOVL	CX,(SP)
	CALL	,codecopy+0(SB)
	MOVL	runq+0(SB),BX
	MOVL	v+-4(SP),DX
	MOVL	AX,12(DX)
	MOVL	4(BX),CX
	ADDL	$2,CX
	MOVL	CX,20(DX)
	MOVL	$1,16(DX)
	JMP	,-29(PC)
	MOVL	end+-12(SP),CX
	MOVL	CX,4(BX)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	Xdelfn+0(SB),0,$20
	MOVL	runq+0(SB),AX
	MOVL	8(AX),AX
	MOVL	(AX),DX
	JMP	,5(PC)
	JMP	,2(PC)
	JMP	,21(PC)
	MOVL	a+-8(SP),AX
	MOVL	4(AX),DX
	CMPL	DX,$0
	JEQ	,-4(PC)
	MOVL	DX,a+-8(SP)
	MOVL	(DX),CX
	MOVL	CX,(SP)
	CALL	,gvlook+0(SB)
	MOVL	AX,CX
	MOVL	12(AX),AX
	CMPL	AX,$0
	JEQ	,6(PC)
	MOVL	CX,v+-4(SP)
	MOVL	12(CX),AX
	MOVL	AX,(SP)
	CALL	,codefree+0(SB)
	MOVL	v+-4(SP),CX
	MOVL	$0,12(CX)
	MOVL	$1,16(CX)
	JMP	,-21(PC)
	CALL	,poplist+0(SB)
	RET	,
	TEXT	concstatus+0(SB),0,$24
	MOVL	s+0(FP),CX
	MOVL	CX,(SP)
	CALL	,strlen+0(SB)
	MOVL	AX,n+-4(SP)
	MOVL	$v$105<>+0(SB),AX
	MOVL	AX,(SP)
	MOVL	s+0(FP),AX
	MOVL	AX,4(SP)
	MOVL	$128,AX
	MOVL	AX,8(SP)
	CALL	,strncpy+0(SB)
	MOVL	n+-4(SP),DX
	CMPL	DX,$128
	JGE	,10(PC)
	MOVB	$124,v$105<>+0(SB)(DX*1)
	LEAL	v$105<>+1(SB)(DX*1),AX
	MOVL	AX,(SP)
	MOVL	t+4(FP),AX
	MOVL	AX,4(SP)
	MOVL	$127,AX
	SUBL	DX,AX
	MOVL	AX,8(SP)
	CALL	,strncpy+0(SB)
	MOVB	$0,v$105<>+128(SB)
	MOVL	$v$105<>+0(SB),AX
	RET	,
	RET	,
	TEXT	Xpipewait+0(SB),0,$152
	MOVL	runq+0(SB),AX
	MOVL	48(AX),AX
	CMPL	AX,$-1
	JNE	,14(PC)
	CALL	,getstatus+0(SB)
	MOVL	AX,.safe+-140(SP)
	MOVL	runq+0(SB),CX
	ADDL	$52,CX
	MOVL	CX,(SP)
	MOVL	.safe+-140(SP),CX
	MOVL	CX,4(SP)
	CALL	,concstatus+0(SB)
	MOVL	AX,.safe+-136(SP)
	MOVL	.safe+-136(SP),AX
	MOVL	AX,(SP)
	CALL	,setstatus+0(SB)
	JMP	,30(PC)
	CALL	,getstatus+0(SB)
	MOVL	AX,.safe+-136(SP)
	LEAL	status+-129(SP),AX
	MOVL	AX,(SP)
	MOVL	.safe+-136(SP),AX
	MOVL	AX,4(SP)
	MOVL	$128,AX
	MOVL	AX,8(SP)
	CALL	,strncpy+0(SB)
	MOVB	$0,status+-1(SP)
	MOVL	runq+0(SB),AX
	MOVL	48(AX),AX
	MOVL	AX,(SP)
	MOVL	$1,AX
	MOVL	AX,4(SP)
	CALL	,Waitfor+0(SB)
	MOVL	runq+0(SB),AX
	MOVL	$-1,48(AX)
	CALL	,getstatus+0(SB)
	MOVL	AX,.safe+-140(SP)
	MOVL	.safe+-140(SP),CX
	MOVL	CX,(SP)
	LEAL	status+-129(SP),CX
	MOVL	CX,4(SP)
	CALL	,concstatus+0(SB)
	MOVL	AX,.safe+-136(SP)
	MOVL	.safe+-136(SP),AX
	MOVL	AX,(SP)
	CALL	,setstatus+0(SB)
	RET	,
	TEXT	Xrdcmds+0(SB),0,$32
	MOVL	runq+0(SB),AX
	MOVL	AX,p+-4(SP)
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	CALL	,flush+0(SB)
	MOVL	$0,nerror+0(SB)
	CMPL	flag+460(SB),$0
	JEQ	,4(PC)
	CALL	,truestatus+0(SB)
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,13(PC)
	DATA	.string<>+696(SB)/8,$"\zstatus="
	DATA	.string<>+704(SB)/8,$"%v\n\zstat"
	MOVL	$.string<>+708(SB),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	4(AX),AX
	MOVL	AX,.safe+-16(SP)
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+697(SB),AX
	MOVL	AX,4(SP)
	MOVL	.safe+-16(SP),AX
	MOVL	AX,8(SP)
	CALL	,pfmt+0(SB)
	MOVL	runq+0(SB),AX
	MOVL	40(AX),AX
	CMPL	AX,$0
	JEQ	,12(PC)
	DATA	.string<>+712(SB)/8,$"us\zpromp"
	MOVL	$.string<>+715(SB),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	MOVL	4(AX),AX
	CMPL	AX,$0
	JEQ	,4(PC)
	MOVL	(AX),AX
	MOVL	AX,promptstr+0(SB)
	JMP	,3(PC)
	MOVL	$.string<>+722(SB),AX
	MOVL	AX,promptstr+0(SB)
	CALL	,Noerror+0(SB)
	CALL	,yyparse+0(SB)
	MOVL	p+-4(SP),CX
	CMPL	AX,$0
	JEQ	,38(PC)
	MOVL	40(CX),AX
	CMPL	AX,$0
	JEQ	,10(PC)
	MOVL	36(CX),AX
	CMPL	AX,$0
	JEQ	,6(PC)
	CALL	,Eintr+0(SB)
	MOVL	p+-4(SP),CX
	CMPL	AX,$0
	JNE	,2(PC)
	JMP	,2(PC)
	JMP	,13(PC)
	MOVL	24(CX),AX
	CMPL	AX,$0
	JEQ	,5(PC)
	MOVL	24(CX),AX
	MOVL	AX,(SP)
	CALL	,efree+0(SB)
	MOVL	p+-4(SP),CX
	MOVL	28(CX),AX
	MOVL	AX,(SP)
	CALL	,closeio+0(SB)
	CALL	,Xreturn+0(SB)
	JMP	,13(PC)
	CALL	,Eintr+0(SB)
	CMPL	AX,$0
	JEQ	,8(PC)
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$10,AX
	MOVL	AX,4(SP)
	CALL	,pchr+0(SB)
	MOVL	p+-4(SP),AX
	MOVL	$0,36(AX)
	MOVL	p+-4(SP),AX
	DECL	,4(AX)
	JMP	,11(PC)
	MOVL	$0,ntrap+0(SB)
	DECL	,4(CX)
	MOVL	codebuf+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$1,AX
	MOVL	AX,4(SP)
	MOVL	runq+0(SB),AX
	MOVL	20(AX),AX
	MOVL	AX,8(SP)
	CALL	,start+0(SB)
	CALL	,freenodes+0(SB)
	RET	,
	TEXT	Xerror+0(SB),0,$20
	DATA	.string<>+720(SB)/8,$"t\z% \zrc\z"
	DATA	.string<>+728(SB)/8,$"/bin/rc\z"
	MOVL	argv0+0(SB),CX
	MOVL	CX,(SP)
	MOVL	$.string<>+725(SB),CX
	MOVL	CX,4(SP)
	CALL	,strcmp+0(SB)
	CMPL	AX,$0
	JEQ	,9(PC)
	MOVL	argv0+0(SB),CX
	MOVL	CX,(SP)
	MOVL	$.string<>+728(SB),CX
	MOVL	CX,4(SP)
	CALL	,strcmp+0(SB)
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,9(PC)
	DATA	.string<>+736(SB)/8,$"rc: %s: "
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+736(SB),AX
	MOVL	AX,4(SP)
	MOVL	s+0(FP),AX
	MOVL	AX,8(SP)
	CALL	,pfmt+0(SB)
	JMP	,10(PC)
	DATA	.string<>+744(SB)/8,$"%r\n\zrc ("
	DATA	.string<>+752(SB)/8,$"%s): %s:"
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+748(SB),AX
	MOVL	AX,4(SP)
	MOVL	argv0+0(SB),AX
	MOVL	AX,8(SP)
	MOVL	s+0(FP),AX
	MOVL	AX,12(SP)
	CALL	,pfmt+0(SB)
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	CALL	,flush+0(SB)
	DATA	.string<>+760(SB)/8,$" %r\n\zerr"
	MOVL	$.string<>+765(SB),AX
	MOVL	AX,(SP)
	CALL	,setstatus+0(SB)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,7(PC)
	MOVL	runq+0(SB),AX
	MOVL	40(AX),AX
	CMPL	AX,$0
	JNE	,-4(PC)
	CALL	,Xreturn+0(SB)
	JMP	,-7(PC)
	RET	,
	TEXT	Xerror1+0(SB),0,$20
	DATA	.string<>+768(SB)/8,$"or\zrc\z/b"
	MOVL	argv0+0(SB),CX
	MOVL	CX,(SP)
	MOVL	$.string<>+771(SB),CX
	MOVL	CX,4(SP)
	CALL	,strcmp+0(SB)
	CMPL	AX,$0
	JEQ	,9(PC)
	MOVL	argv0+0(SB),CX
	MOVL	CX,(SP)
	MOVL	$.string<>+774(SB),CX
	MOVL	CX,4(SP)
	CALL	,strcmp+0(SB)
	CMPL	AX,$0
	JEQ	,2(PC)
	JMP	,9(PC)
	DATA	.string<>+776(SB)/8,$"in/rc\zrc"
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+782(SB),AX
	MOVL	AX,4(SP)
	MOVL	s+0(FP),AX
	MOVL	AX,8(SP)
	CALL	,pfmt+0(SB)
	JMP	,10(PC)
	DATA	.string<>+784(SB)/8,$": %s\n\zrc"
	DATA	.string<>+792(SB)/8,$" (%s): %"
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	MOVL	$.string<>+790(SB),AX
	MOVL	AX,4(SP)
	MOVL	argv0+0(SB),AX
	MOVL	AX,8(SP)
	MOVL	s+0(FP),AX
	MOVL	AX,12(SP)
	CALL	,pfmt+0(SB)
	MOVL	err+0(SB),AX
	MOVL	AX,(SP)
	CALL	,flush+0(SB)
	DATA	.string<>+800(SB)/8,$"s\n\zerror"
	MOVL	$.string<>+803(SB),AX
	MOVL	AX,(SP)
	CALL	,setstatus+0(SB)
	JMP	,3(PC)
	JMP	,2(PC)
	JMP	,7(PC)
	MOVL	runq+0(SB),AX
	MOVL	40(AX),AX
	CMPL	AX,$0
	JNE	,-4(PC)
	CALL	,Xreturn+0(SB)
	JMP	,-7(PC)
	RET	,
	TEXT	setstatus+0(SB),0,$16
	DATA	.string<>+808(SB)/8,$"\zstatus\z"
	MOVL	s+0(FP),CX
	MOVL	CX,(SP)
	MOVL	$0,4(SP)
	CALL	,newword+0(SB)
	MOVL	AX,.safe+-4(SP)
	MOVL	$.string<>+809(SB),AX
	MOVL	AX,(SP)
	MOVL	.safe+-4(SP),AX
	MOVL	AX,4(SP)
	CALL	,setvar+0(SB)
	RET	,
	TEXT	getstatus+0(SB),0,$16
	MOVL	$.string<>+816(SB),CX
	MOVL	CX,(SP)
	CALL	,vlook+0(SB)
	DATA	.string<>+816(SB)/8,$"status\z\z"
	MOVL	4(AX),CX
	CMPL	CX,$0
	JEQ	,4(PC)
	MOVL	4(AX),AX
	MOVL	(AX),AX
	JMP	,2(PC)
	MOVL	$.string<>+823(SB),AX
	RET	,
	RET	,
	TEXT	truestatus+0(SB),0,$8
	CALL	,getstatus+0(SB)
	MOVL	AX,CX
	JMP	,4(PC)
	JMP	,2(PC)
	JMP	,15(PC)
	INCL	,CX
	MOVBLSX	(CX),AX
	CMPB	AX,$0
	JEQ	,-4(PC)
	MOVBLSX	(CX),AX
	CMPL	AX,$124
	JEQ	,4(PC)
	MOVBLSX	(CX),AX
	CMPL	AX,$48
	JNE	,2(PC)
	JMP	,3(PC)
	MOVL	$0,AX
	RET	,
	JMP	,-15(PC)
	MOVL	$1,AX
	RET	,
	RET	,
	TEXT	Xdelhere+0(SB),0,$8
	MOVL	runq+0(SB),DX
	MOVL	4(DX),AX
	INCL	,4(DX)
	MOVL	(DX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,(SP)
	CALL	,Unlink+0(SB)
	RET	,
	TEXT	Xfor+0(SB),0,$8
	MOVL	runq+0(SB),CX
	MOVL	8(CX),AX
	MOVL	(AX),AX
	CMPL	AX,$0
	JNE	,9(PC)
	CALL	,poplist+0(SB)
	MOVL	runq+0(SB),BX
	MOVL	4(BX),AX
	MOVL	(BX),CX
	LEAL	(CX)(AX*4),AX
	MOVL	(AX),AX
	MOVL	AX,4(BX)
	JMP	,21(PC)
	MOVL	20(CX),AX
	MOVL	4(AX),AX
	MOVL	AX,(SP)
	CALL	,freelist+0(SB)
	MOVL	runq+0(SB),DX
	MOVL	20(DX),AX
	MOVL	8(DX),CX
	MOVL	(CX),CX
	MOVL	CX,4(AX)
	MOVL	20(DX),AX
	MOVL	$1,8(AX)
	MOVL	8(DX),AX
	MOVL	8(DX),CX
	MOVL	(CX),CX
	MOVL	4(CX),CX
	MOVL	CX,(AX)
	MOVL	20(DX),AX
	MOVL	4(AX),AX
	MOVL	$0,4(AX)
	INCL	,4(DX)
	RET	,
	TEXT	Xglob+0(SB),0,$0
	CALL	,globlist+0(SB)
	RET	,
	GLOBL	gvar+0(SB),$2084
	GLOBL	ntrap+0(SB),$4
	GLOBL	mypid+0(SB),$4
	GLOBL	ndot+0(SB),$4
	GLOBL	havefork+0(SB),$4
	GLOBL	err+0(SB),$4
	GLOBL	promptstr+0(SB),$4
	GLOBL	ifnot+0(SB),$4
	GLOBL	tok+0(SB),$8192
	GLOBL	trap+0(SB),$128
	GLOBL	runq+0(SB),$4
	GLOBL	doprompt+0(SB),$4
	GLOBL	nerror+0(SB),$4
	GLOBL	eflagok+0(SB),$4
	GLOBL	lastc+0(SB),$4
	GLOBL	.string<>+0(SB),$824
	GLOBL	codebuf+0(SB),$4
	GLOBL	cmdtree+0(SB),$4
	GLOBL	lastword+0(SB),$4
	GLOBL	beenhere$25<>+0(SB),$4
	GLOBL	v$105<>+0(SB),$129
	GLOBL	argp+0(SB),$4
	GLOBL	args+0(SB),$4
	GLOBL	argv0+0(SB),$4
	END	,
